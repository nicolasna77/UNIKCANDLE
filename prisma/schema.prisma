datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
generator client {
 provider = "prisma-client-js"
  output   = "../src/generated/client"
  binaryTargets = ["native", "windows", "debian-openssl-3.0.x"]

}


model Newsletter {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String    @id
  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  banExpires    Int?
  banReason     String?
  banned        Boolean?  @default(false)
  role          String?   @default("user")
  orders        Order[]
  reviews       Review[]
  accounts      Account[]
  sessions      Session[]

  @@map("user")
}

model Jwks {
  id         String   @id @default(uuid())
  publicKey  String
  privateKey String
  createdAt  DateTime

  @@map("jwks")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String   @unique
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  impersonatedBy String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Product {
  id          String           @id @default(uuid())
  name        String
  description String
  price       Float
  imageUrl    String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  deletedAt   DateTime?
  orders      OrderItem[]
  variants    ProductVariant[]
  reviews     Review[]
}

model Scent {
  id          String           @id @default(uuid())
  name        String
  description String
  icon        String
  color       String
  model3dUrl  String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  OrderItem   OrderItem[]
  variants    ProductVariant[]
}

model ProductVariant {
  id          String   @id @default(uuid())
  productId   String
  scentId     String
  imageUrl    String
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  scent       Scent    @relation(fields: [scentId], references: [id])

  @@unique([productId, scentId])
}

model Order {
  id              String      @id @default(uuid())
  userId          String
  status          OrderStatus @default(PENDING)
  total           Float
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  shippingAddress Address?
  user            User        @relation(fields: [userId], references: [id])
  items           OrderItem[]
}

model OrderItem {
  id          String   @id @default(uuid())
  orderId     String
  productId   String
  quantity    Int
  price       Float
  scentId     String
  audioUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  animationId String?
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id])
  scent       Scent    @relation(fields: [scentId], references: [id])
  qrCode      QRCode?
}

model Address {
  id        String   @id @default(uuid())
  orderId   String   @unique
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model QRCode {
  id          String    @id @default(cuid())
  orderItemId String    @unique
  code        String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
