generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Newsletter {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String    @id
  name          String
  email         String    @unique
  emailVerified Boolean
  createdAt     DateTime
  updatedAt     DateTime
  banExpires    Int?
  banReason     String?
  banned        Boolean?  @default(false)
  image         String?
  role          String?
  orders        Order[]
  reviews       Review[]
  accounts      Account[]
  sessions      Session[]

  @@map("user")
}

model Jwks {
  id         String   @id @default(uuid())
  publicKey  String
  privateKey String
  createdAt  DateTime

  @@map("jwks")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String   @unique
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  impersonatedBy String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String
  price       Float
  subTitle    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?
  arAnimation String
  slogan      String
  scentId     String
  categoryId  String
  images      Image[]
  orders      OrderItem[]
  category    Category    @relation(fields: [categoryId], references: [id])
  scent       Scent       @relation(fields: [scentId], references: [id])
  reviews     Review[]
}

model Image {
  id        String   @id @default(uuid())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String
  product   Product  @relation(fields: [productId], references: [id])
}

model Scent {
  id          String      @id @default(uuid())
  name        String
  description String
  icon        String
  color       String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  notes       String[]
  orderItems  OrderItem[]
  products    Product[]
}

model Order {
  id              String      @id @default(uuid())
  userId          String
  status          OrderStatus @default(PENDING)
  total           Float
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  shippingAddress Address?
  user            User        @relation(fields: [userId], references: [id])
  items           OrderItem[]
}

model OrderItem {
  id          String   @id @default(uuid())
  orderId     String
  productId   String
  quantity    Int
  price       Float
  scentId     String
  audioUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  animationId String?
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id])
  scent       Scent    @relation(fields: [scentId], references: [id])
  qrCode      QRCode?
  Return      Return[]
}

model Address {
  id        String   @id @default(uuid())
  orderId   String   @unique
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String?
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model QRCode {
  id          String    @id @default(cuid())
  orderItemId String    @unique
  code        String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
}

model TemporaryOrder {
  id        String   @id @default(uuid())
  orderId   String   @unique
  userId    String
  orderData String // JSON stocké en texte
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Return {
  id           String       @id @default(uuid())
  orderItemId  String
  reason       String
  description  String?
  status       ReturnStatus @default(REQUESTED)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  processedAt  DateTime?
  refundAmount Float?
  adminNote    String?

  // Suivi du colis retour
  trackingNumber String?
  carrier        String?
  trackingUrl    String?
  shippedAt      DateTime?
  deliveredAt    DateTime?

  // Remboursement Stripe
  stripeRefundId String?

  refundedAt   DateTime?
  refundStatus RefundStatus @default(PENDING)

  orderItem OrderItem @relation(fields: [orderItemId], references: [id])
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String
  icon        String
  color       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

enum ReturnStatus {
  REQUESTED
  APPROVED
  REJECTED
  RETURN_SHIPPING_SENT // Étiquette de retour envoyée
  RETURN_IN_TRANSIT // Colis retour en cours
  RETURN_DELIVERED // Colis retour reçu
  PROCESSING // Traitement du retour
  COMPLETED // Retour terminé et remboursé
}

enum RefundStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
